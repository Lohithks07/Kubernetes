# Kubeadm Installation Guide

This guide outlines the steps needed to set up a Kubernetes cluster using kubeadm.

## Pre-requisites

- Ubuntu OS (Xenial or later)
    ubuntu-22.04
- sudo privileges
- Internet access
- t2.medium instance type or higher

---

## AWS Setup

- Make sure your all instance are in same Security group.
- Expose port 6443 in the Security group, so that worker nodes can join the cluster.

---

## Execute on Both Master & Worker Node

Run the following commands on both the master and worker nodes to prepare them for kubeadm.
vi kube.sh

```bash
# disable swap
sudo swapoff -a

# Create the .conf file to load the modules at bootup
cat EOF  sudo tee etcmodules-load.dk8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

# sysctl params required by setup, params persist across reboots
cat EOF  sudo tee etcsysctl.dk8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

# Apply sysctl params without reboot
sudo sysctl --system

## Install CRIO Runtime
sudo apt-get update -y
sudo apt-get install -y software-properties-common curl apt-transport-https ca-certificates gpg

sudo curl -fsSL httpspkgs.k8s.ioaddonscri-oprereleasemaindebRelease.key  sudo gpg --dearmor -o etcaptkeyringscri-o-apt-keyring.gpg
echo deb [signed-by=etcaptkeyringscri-o-apt-keyring.gpg] httpspkgs.k8s.ioaddonscri-oprereleasemaindeb   sudo tee etcaptsources.list.dcri-o.list

sudo apt-get update -y
sudo apt-get install -y cri-o

sudo systemctl daemon-reload
sudo systemctl enable crio --now
sudo systemctl start crio.service

echo CRI runtime installed successfully

# Add Kubernetes APT repository and install required packages
curl -fsSL httpspkgs.k8s.iocorestablev1.29debRelease.key  sudo gpg --dearmor -o etcaptkeyringskubernetes-apt-keyring.gpg
echo 'deb [signed-by=etcaptkeyringskubernetes-apt-keyring.gpg] httpspkgs.k8s.iocorestablev1.29deb '  sudo tee etcaptsources.list.dkubernetes.list

sudo apt-get update -y
sudo apt-get install -y kubelet=1.29.0- kubectl=1.29.0- kubeadm=1.29.0-
sudo apt-get update -y
sudo apt-get install -y jq

sudo systemctl enable --now kubelet
sudo systemctl start kubelet
```

---

## Execute ONLY on Master Node

```bash
sudo kubeadm config images pull

sudo kubeadm init

mkdir -p $HOME.kube
sudo cp -i etckubernetesadmin.conf $HOME.kubeconfig
sudo chown $(id -u)$(id -g) $HOME.kubeconfig


# Network Plugin = calico
kubectl apply -f httpsraw.githubusercontent.comprojectcalicocalicov3.26.0manifestscalico.yaml

kubeadm token create --print-join-command
```

- You will get `kubeadm token`, Copy it.
  img src=httpsraw.githubusercontent.comfaizan35kubernetes_cluster_with_kubeadmmainImgkubeadm-token.png width=75%

---

## Execute on ALL of your Worker Node's

1. Perform pre-flight checks

   ```bash
   sudo kubeadm reset pre-flight checks
   ```

2. Paste the join command you got from the master node and append `--v=5` at the end.

   ```bash
   sudo your-token --v=5
   ```

    Use `sudo` before the token.

---

## Verify Cluster Connection

On Master Node

```bash
kubectl get nodes
```

   img src=httpsraw.githubusercontent.comfaizan35kubernetes_cluster_with_kubeadmmainImgnodes-connected.png width=70%

---

## Optional Labeling Nodes

If you want to label worker nodes, you can use the following command

```bash
kubectl label node node-name node-role.kubernetes.ioworker=worker
```

---

## Optional Test a demo Pod

If you want to test a demo pod, you can use the following command

```bash
kubectl run hello-world-pod --image=busybox --restart=Never --command -- sh -c echo 'Hello, World' && sleep 3600
```

kbd![image](httpsgithub.comparagpallavsinghkubernetes-kickstarterassets40052830bace1884-bbba-4e2f-8fb2-83bbba819d08)kbd